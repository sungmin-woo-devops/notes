
엔드포인트 확인
엔드포인트는 서비스의 레이블 셀렉터에 의해 연결된(포워딩할) 
파드의 IP 목록을 엔드포인트 리소스로 관리하고 있다.

엔드포인트의 이름은 서비스와 같아야 한다.


### 파드 생성 및 엔드포인트 연결
- 해당되는 레이블 가진 파드 생성 -> 서비스는 자동으로 엔드포인트 추가
- 나중에 파드가 추가/제거 
  -> 레이블 셀렉터에 의해 매칭되는 파드는 
  -> 엔드포인트가 자동으로 추가/제거

파드 - 레이블 셀렉터 - 엔드포인트

---

EndPoint와 Service는 쿠버네티스 네트워크 관련 작업을 처리하는 데 사용되는 두 가지 다른 개념이다.

EndPoints : Pod의 IP 주소, Pod 서비스 포트 번호, ... 정보 유지
Service : 클러스터 내부에서 서비스 노출 시 사용, 엔드포인트 노출 -> 클러스터의 다른 구성 요소에서 사용

Service는 클러스터 내부에서 네트워크 서비스를 노출하는 데 사용되며, 
엔드 포인트를 노출하고 클러스터의 다른 구성 요소에서 사용할 수 있도록 합니다.

서비스는 일반적으로 네트워크 요청을 로드 밸런싱하고 클러스터의 다른 서비스 및 구성 요소에서 사용하기 쉬운 이름으로 노출하는 역할을 합니다. 이때 서비스의 구성에 따라서 Endpoint가 설정이 됩니다. 즉, 서비스에 대한 구성에서 Selector로 설정된 레이블과 일치하는 Pod의 IP 주소 및 포트 정보를 엔드 포인트에 추가합니다. 이를 통해 서비스가 클러스터 내부에서 사용 가능한 네트워크 엔드포인트로 노출됩니다.

따라서, Service와 Endpoint는 서로 연관되어 있으며, Service는 Endpoint를 기반으로 작동합니다. Service가 생성될 때, 해당 서비스를 참조하는 엔드포인트는 자동으로 생성되며, 서비스 구성에 따라 업데이트 됩니다. Endpoint는 Service를 통해 다른 서비스나 구성 요소와 통신하기 위한 Pod의 IP 주소와 포트 번호 정보를 유지합니다. 이를 통해 Service는 Endpoint를 통해 클러스터 내부에서 네트워크 연결을 설정하고 사용 가능한 네트워크 엔드포인트로 노출합니다.


vagrant@kube-control1:~/cccr/work/20230214$ k get svc
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   5d2h

CLUSTER-IP vs. EXTERNAL-IP

---
매니페스트 파일 생성

명령어로 서비스 생성
$ kubetl expose CONTROLLER_TYPE CONTROLLER_NAME [--type=SVC_TYPE] --name SVC_NAME



vagrant@kube-control1:~/cccr/work/20230214$ k get svc -o wide
NAME         TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE    SELECTOR
kubernetes   ClusterIP   10.96.0.1      <none>        443/TCP   5d3h   <none>
myapp-svc    ClusterIP   10.97.146.98   <none>        80/TCP    8s     app=myapp-rs

vagrant@kube-control1:~/cccr/work/20230214$ k describe svc myapp-svc
Name:              myapp-svc
Namespace:         default
Labels:            <none>
Annotations:       <none>
Selector:          app=myapp-rs
Type:              ClusterIP
IP Family Policy:  SingleStack
IP Families:       IPv4
IP:                10.97.146.98 - 클러스터 IP 주소
IPs:               10.97.146.98
Port:              <unset>  80/TCP
TargetPort:        8080/TCP
Endpoints:         <none> - 보통 Service를 만들면 Endpoint도 같이 만들어진다.
Session Affinity:  None
Events:            <none>

보통 별도로 endpoints 오브젝트 자체를 따로 만들진 않는다.
vagrant@kube-control1:~/cccr/work/20230214$ k get endpoints
NAME         ENDPOINTS            AGE
kubernetes   192.168.56.11:6443   5d3h
myapp-svc    <none>               2m47s - 왜 비어있는가? 
                                          서비스 오브젝트는 만들었지만 이에 연결되는 오브젝트 부여 X

vagrant@kube-control1:~/cccr/work/20230214$ k describe endpoints myapp-svc
Name:         myapp-svc
Namespace:    default
Labels:       <none>
Annotations:  endpoints.kubernetes.io/last-change-trigger-time: 2023-02-14T05:19:10Z
Subsets:
Events:  <none>

---

kubectl run POD [OPTION] --image=IMAGE_REPO:TAG [COMMAND]

---

vagrant@kube-control1:~/cccr/work/20230214$ k describe svc myapp-svc-namedport
Name:              myapp-svc-namedport
Namespace:         default
Labels:            <none>
Annotations:       <none>
Selector:          app=myapp-rs-named-http
Type:              ClusterIP
IP Family Policy:  SingleStack
IP Families:       IPv4
IP:                10.111.233.158
IPs:               10.111.233.158
Port:              myapp-http  80/TCP -  포트를 이름으로 참조할 수 있다.
TargetPort:        myapp-http/TCP
Endpoints:         <none>
Session Affinity:  None
Events:            <none>

---

bash-5.1# SERVICE_NAME
bash-5.1# SERVICE_NAME.NAMESPACE 
bash-5.1# SERVICE_NAME.NAMESPACE.OBJECT
bash-5.1# SERVICE_NAME.NAMESPACE.OBJECT.CLUSTER_ADDR
bash-5.1# SERVICE_NAME.NAMESPACE.OBJECT.cluster.local










